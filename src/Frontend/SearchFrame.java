/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frontend;

import Backend.*;
import java.awt.Frame;
import java.util.*;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author daree
 */
public class SearchFrame extends javax.swing.JFrame {
  
    UserDataBase userDB=UserDataBase.getDatabase();
    Search Search = new Search();
    Newsfeed newsfeed;
    User currentuser;
    Management manage;
    Frame currentFrame;
    GroupManagement groupmanage = new GroupManagement();
    GroupDataBase GDB= GroupDataBase.getInstance();
    public SearchFrame(Newsfeed newsfeed, User currentuser, Management manage) {
        initComponents();
         this.newsfeed = newsfeed;
        this.currentuser = currentuser;
        this.manage = manage;
        currentFrame = this;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSearch = new javax.swing.JButton();
        searchBar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();
        backbutton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBarActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(list);

        backbutton.setText("Back");
        backbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                    .addComponent(searchBar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 15, Short.MAX_VALUE)
                        .addComponent(backbutton)
                        .addGap(20, 20, 20))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addComponent(backbutton)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
                                        
    ArrayList<String> allblockedIds = manage.getAllUsersBlockedForaUser(currentuser.getUserId());
    String searchField = searchBar.getText();

    if (searchField == null) {
        return;
    } else if (searchField.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "You must write something in the Search Bar", "Message", JOptionPane.PLAIN_MESSAGE);
    } else {
        ArrayList<User> searchResults = Search.searchUser(searchField);
        ArrayList<User> searchResultswithoutBlocked = new ArrayList<>();

        for (User u : searchResults) {
            if (!allblockedIds.contains(u.getUserId())) {
                searchResultswithoutBlocked.add(u);
            }
        }

        ArrayList<Group> searchResultsGroups = Search.searchGroup(searchField);
        DefaultListModel<String> model = new DefaultListModel<>();

        for (User u : searchResultswithoutBlocked) {
            String username = u.getUsername();
            model.addElement("User:" + username);
        }

        for (Group g : searchResultsGroups) {
            String groupName = g.getGroupName();
            model.addElement("Group:" + groupName);
        }

        list.setModel(model);
        jScrollPane1.setViewportView(list);

        // Adding listener to detect selection changes in the JList
        list.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int index = list.getSelectedIndex();
                    if (index >= 0) {
                        String selectedValue = list.getSelectedValue();

                        if (selectedValue.startsWith("User:")) {
                            String username = selectedValue.substring(5);
                            User u = userDB.getUserByUsername(username);
                            if (u != null) {
                                String selectedUserId = u.getUserId();
                                ArrayList<String> currentUserFriendsIds = manage.getUserFriendsIDs(currentuser.getUserId());

                                if (currentUserFriendsIds.contains(selectedUserId)) {
                                    viewFriendSearch viewFriendProfile = new viewFriendSearch(newsfeed, currentuser, manage, u);
                                    setVisible(false);
                                    viewFriendProfile.setVisible(true);
                                } else {
                                    viewUserSearch viewUserProfile = new viewUserSearch(newsfeed, currentuser, manage, u);
                                    setVisible(false);
                                    viewUserProfile.setVisible(true);
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "User not found!", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } else if (selectedValue.startsWith("Group:")) {
                            String groupName = selectedValue.substring(6);
                            Group group = GDB.getGroupByname(groupName);
                            if (group != null) {
                                GDB.setCurrentGroup(group);
                                GroupProxy groupProxy = new GroupProxy(group, currentuser);

                                if (groupProxy.isPrimaryAdmin()) {
                                  ViewGroupFrame viewGroup = new ViewGroupFrame(group);
                                    setVisible(false);
                                 viewGroup.setVisible(true);
                                } else if (groupProxy.isAdmin()) {
                                   ViewGroupFrame viewGroup = new ViewGroupFrame(group);
                                    setVisible(false);
                                 viewGroup.setVisible(true);;
                                } else if (groupProxy.isMember()) {
                              ViewGroupFrame viewGroup = new ViewGroupFrame(group);
                                    setVisible(false);
                                 viewGroup.setVisible(true);
                                } 
                                 else {
            // Show a dialog to ask if the user wants to join the group
            int choice = JOptionPane.showConfirmDialog(
                currentFrame,
                "You are not a part of this group. Would you like to request to join?",
                "Join Group",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
            );

            if (choice == JOptionPane.YES_OPTION)
            {
               groupmanage.sendrequest(currentuser.getUserId(), group.getGroupId());
          
                 JOptionPane.showMessageDialog( currentFrame,"Your request to join the group has been sent.","Request Sent",JOptionPane.INFORMATION_MESSAGE);
            } 
            else 
               {
                    JOptionPane.showMessageDialog(currentFrame,"Request not sent","Error",JOptionPane.ERROR_MESSAGE );
               }
            }
        }
    }
        } else {
                        JOptionPane.showMessageDialog(currentFrame, "You should select an item from the list.", "No Selection", JOptionPane.WARNING_MESSAGE);
                    }
                }
            }
        });
    }

    }//GEN-LAST:event_btnSearchActionPerformed
    
    
    private void searchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBarActionPerformed

    private void backbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbuttonActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        newsfeed.setVisible(true);
    }//GEN-LAST:event_backbuttonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
         setVisible(false);
        newsfeed.setVisible(true);
    }//GEN-LAST:event_formWindowClosed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backbutton;
    private javax.swing.JButton btnSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> list;
    private javax.swing.JTextField searchBar;
    // End of variables declaration//GEN-END:variables
}
